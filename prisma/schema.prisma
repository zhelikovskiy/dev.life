generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

enum ProjectStatus {
	IN_PLANNING
	IN_PROGRESS
	PAUSED
	COMPLETED
	ABANDONED
}

model User {
	id String @id @default(uuid())
	username String @unique
	email String @unique
	password String
	avatar String?

	posts Post[]
	projects Project[]
	likes Like[]
	comments Comment[]
	following Follow[] @relation("UserFollowing")
	followers Follow[] @relation("UserFollowers")
}

model Post {
	id String @id @default(uuid())
	title String?
	content String
	image String[]
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	author User @relation(fields: [authorId], references: [id])
	authorId String

	comments Comment[]
	likes Like[]
	tags Tag[] @relation("PostTags")
}

model Project {
	id String @id @default(uuid())
	title String
	description String
	repositoryLink  String
	images String[]
	demoUrl String?
	status ProjectStatus @default(IN_PROGRESS)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	author User @relation(fields: [authorId], references: [id])
	authorId String

	likes Like[]
	comments Comment[]
	tags Tag[] @relation("ProjectTags")
}

model Follow{
	id String @id @default(uuid())

	follower User @relation("UserFollowing", fields: [followerId], references: [id])
	followerId String

	following User @relation("UserFollowers", fields: [followingId], references: [id])
	followingId String

	@@unique([followerId, followingId])
}

model Like {
	id String @id @default(uuid())
	createdAt DateTime @default(now())

	user User @relation(fields: [userId], references: [id])
	userId String

	project Project? @relation(fields: [projectId], references: [id])
	projectId String?

	post Post? @relation(fields: [postId], references: [id])
	postId String?

	@@unique([userId, postId])
  	@@unique([userId, projectId])
}

model Comment {
	id String @id @default(uuid())
	content String
	createdAt DateTime @default(now())

	author User @relation(fields: [authorId], references: [id])
	authorId String

	parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
	parentId String?
	replies Comment[] @relation("CommentReplies")


	project Project? @relation(fields: [projectId], references: [id])
	projectId String?
	
	post Post? @relation(fields: [postId], references: [id])
	postId String?
}

model Tag {
	id String @id @default(uuid())
	name String @unique

	posts Post[] @relation("PostTags")
	projects Project[] @relation("ProjectTags")
}